#!/usr/bin/env ruby

MASTER_BRANCH   = 'production'
MASTER_ROOT     = 'e7d1cd218a49b39aa4406c99cd8af38f6ee55663'
MODULE_PATTERNS = [
  %r{^modules/internal/\w+/},
  %r{^modules/public/\w+/},
  %r{^data/},
  %r{^manifests/},
  %r{^extras/}
]

def owning_module(path)
  MODULE_PATTERNS.each do |pattern|
    result = path.match(pattern) || next
    return result[0]
  end
  :"(superproject)"
end

def reject(rev, module1, module2)
  puts '.-------------------------------------------- Cross Module Commit ---'
  puts '| REJECTED!'
  puts "| Revision: #{rev}"
  puts "| Module 1: #{module1}"
  puts "| Module 2: #{module2}"
  puts '| Citation: Attempt to push commits referencing two seperate modules'
  puts '| Solution: Do not push commits which reference more than one module.'
  puts '|           When making changes to multiple modules, make multiple'
  puts '|           commits.'
  puts '|'
  puts '| Module Patterns Are:'
  MODULE_PATTERNS.each do |pattern|
    puts "|   #{pattern.inspect.sub('/', '').sub(/\/$/, '').gsub('\/','/')  }"
  end
  puts '`--------------------------------------------------------------------'
end

STDIN.each_line do |input|
  oldrev, newrev, ref = input.split(' ')

  # If the ref is being deleted, abort the check.
  next if newrev.to_i(16) == 0

  # If the ref being pushed is new, configure the old revision to be the
  # merge-base of the master branch.
  if oldrev.to_i(16) == 0
    IO.popen("git merge-base #{MASTER_BRANCH} #{newrev}").each do |base|
      oldrev = base.chomp
    end
    exit 0 if oldrev.to_i(16) == 0
  end

  # Check every commit between the merge base (oldrev) and the new revision
  # for cross-module edits. Abort and alert the user if any are found.
  IO.popen("git log #{oldrev}..#{newrev} --format=oneline").each do |line|
    rev = line.split(' ').first

    # If there is no merge base for root of the master branch and the revision
    # being checked, move along. These are not the commits we're looking for.
    # Yes, this means that a malicious user could potentially find a way around
    # this hook. This hook is not for security.
    next unless system("git merge-base #{MASTER_ROOT} #{rev} >/dev/null 2>&1")

    module1 = nil
    IO.popen("git show --pretty='format:' --name-only #{rev}").each do |path|
      next if path.chomp.empty?
      module1 ||= owning_module(path)
      module2   = owning_module(path)
      if module1 != module2
        reject(rev, module1, module2)
        exit 1
      end
    end
  end
end
